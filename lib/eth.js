"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTokenApi = exports.getCurrentBlockNumber = void 0;
const ethjs_1 = __importDefault(require("ethjs"));
const hex2dec_1 = require("hex2dec");
const helper_1 = require("./helper");
const abi = require("./abi.json");
const config = require("../config.json");
const eth = new ethjs_1.default(new ethjs_1.default.HttpProvider(config.infura));
const erc20contract = eth.contract(abi);
const transferTopic = "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";
async function getCurrentBlockNumber() {
    const res = await eth.blockNumber();
    return Number(res);
}
exports.getCurrentBlockNumber = getCurrentBlockNumber;
async function generateTokenApi(token) {
    const contract = erc20contract.at(token.contract);
    const decimals = await contract.decimals();
    const getTransactionsFromBlock = async (from, to) => {
        const txs = await eth.getLogs({
            fromBlock: new ethjs_1.default.BN(String(from)),
            toBlock: new ethjs_1.default.BN(String(to)),
            address: token.contract,
            topics: [transferTopic],
        });
        return txs.map((tx) => {
            return {
                hash: tx.transactionHash,
                amount: hex2dec_1.hexToDec(tx.data),
                sender: helper_1.addressToLower(helper_1.hexToAddress(tx.topics[1])),
                receiver: helper_1.addressToLower(helper_1.hexToAddress(tx.topics[2])),
                block: Number(tx.blockNumber.toString()),
            };
        });
    };
    return {
        symbol: token.symbol,
        decimals: Number(decimals[0].toString()),
        address: token.contract,
        getTransactionsFromBlock,
    };
}
exports.generateTokenApi = generateTokenApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2V0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrREFBd0I7QUFFeEIscUNBQW1DO0FBQ25DLHFDQUF3RDtBQUN4RCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDbEMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFFekMsTUFBTSxHQUFHLEdBQUcsSUFBSSxlQUFHLENBQUMsSUFBSSxlQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBRXpELE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7QUFHeEMsTUFBTSxhQUFhLEdBQ2pCLG9FQUFvRSxDQUFDO0FBb0JoRSxLQUFLLFVBQVUscUJBQXFCO0lBQ3pDLE1BQU0sR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3BDLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLENBQUM7QUFIRCxzREFHQztBQUVNLEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxLQUFrQjtJQUN2RCxNQUFNLFFBQVEsR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsRCxNQUFNLFFBQVEsR0FBRyxNQUFNLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUUzQyxNQUFNLHdCQUF3QixHQUFHLEtBQUssRUFDcEMsSUFBWSxFQUNaLEVBQVUsRUFDbUIsRUFBRTtRQUMvQixNQUFNLEdBQUcsR0FBRyxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUM7WUFDNUIsU0FBUyxFQUFFLElBQUksZUFBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkMsT0FBTyxFQUFFLElBQUksZUFBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDL0IsT0FBTyxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3ZCLE1BQU0sRUFBRSxDQUFDLGFBQWEsQ0FBQztTQUN4QixDQUFDLENBQUM7UUFDSCxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFPLEVBQUUsRUFBRTtZQUN6QixPQUFPO2dCQUNMLElBQUksRUFBRSxFQUFFLENBQUMsZUFBZTtnQkFDeEIsTUFBTSxFQUFFLGtCQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztnQkFDekIsTUFBTSxFQUFFLHVCQUFjLENBQUMscUJBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELFFBQVEsRUFBRSx1QkFBYyxDQUFDLHFCQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwRCxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDekMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsT0FBTztRQUNMLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtRQUNwQixRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4QyxPQUFPLEVBQUUsS0FBSyxDQUFDLFFBQVE7UUFDdkIsd0JBQXdCO0tBQ3pCLENBQUM7QUFDSixDQUFDO0FBL0JELDRDQStCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFdGggZnJvbSBcImV0aGpzXCI7XG5pbXBvcnQgeyBUb2tlbkNvbmZpZyB9IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgeyBoZXhUb0RlYyB9IGZyb20gXCJoZXgyZGVjXCI7XG5pbXBvcnQgeyBhZGRyZXNzVG9Mb3dlciwgaGV4VG9BZGRyZXNzIH0gZnJvbSBcIi4vaGVscGVyXCI7XG5jb25zdCBhYmkgPSByZXF1aXJlKFwiLi9hYmkuanNvblwiKTtcbmNvbnN0IGNvbmZpZyA9IHJlcXVpcmUoXCIuLi9jb25maWcuanNvblwiKTtcblxuY29uc3QgZXRoID0gbmV3IEV0aChuZXcgRXRoLkh0dHBQcm92aWRlcihjb25maWcuaW5mdXJhKSk7XG5cbmNvbnN0IGVyYzIwY29udHJhY3QgPSBldGguY29udHJhY3QoYWJpKTtcbi8vIGNvbnN0IHRlbiA9IG5ldyBFdGguQk4oXCIxMFwiKTtcblxuY29uc3QgdHJhbnNmZXJUb3BpYyA9XG4gIFwiMHhkZGYyNTJhZDFiZTJjODliNjljMmIwNjhmYzM3OGRhYTk1MmJhN2YxNjNjNGExMTYyOGY1NWE0ZGY1MjNiM2VmXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9rZW5BcGkge1xuICBzeW1ib2w6IHN0cmluZztcbiAgZGVjaW1hbHM6IG51bWJlcjtcbiAgYWRkcmVzczogc3RyaW5nO1xuICBnZXRUcmFuc2FjdGlvbnNGcm9tQmxvY2s6IChcbiAgICBmcm9tOiBudW1iZXIsXG4gICAgdG86IG51bWJlclxuICApID0+IFByb21pc2U8RXJjMjBUcmFuc2FjdGlvbltdPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFcmMyMFRyYW5zYWN0aW9uIHtcbiAgaGFzaDogc3RyaW5nO1xuICBhbW91bnQ6IG51bWJlcjtcbiAgc2VuZGVyOiBzdHJpbmc7XG4gIHJlY2VpdmVyOiBzdHJpbmc7XG4gIGJsb2NrOiBudW1iZXI7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDdXJyZW50QmxvY2tOdW1iZXIoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgY29uc3QgcmVzID0gYXdhaXQgZXRoLmJsb2NrTnVtYmVyKCk7XG4gIHJldHVybiBOdW1iZXIocmVzKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlVG9rZW5BcGkodG9rZW46IFRva2VuQ29uZmlnKTogUHJvbWlzZTxUb2tlbkFwaT4ge1xuICBjb25zdCBjb250cmFjdCA9IGVyYzIwY29udHJhY3QuYXQodG9rZW4uY29udHJhY3QpO1xuICBjb25zdCBkZWNpbWFscyA9IGF3YWl0IGNvbnRyYWN0LmRlY2ltYWxzKCk7XG4gIC8vIGNvbnN0IGRpdmlkZXIgPSB0ZW4ucG93KGRlY2ltYWxzWzBdKTtcbiAgY29uc3QgZ2V0VHJhbnNhY3Rpb25zRnJvbUJsb2NrID0gYXN5bmMgKFxuICAgIGZyb206IG51bWJlcixcbiAgICB0bzogbnVtYmVyXG4gICk6IFByb21pc2U8RXJjMjBUcmFuc2FjdGlvbltdPiA9PiB7XG4gICAgY29uc3QgdHhzID0gYXdhaXQgZXRoLmdldExvZ3Moe1xuICAgICAgZnJvbUJsb2NrOiBuZXcgRXRoLkJOKFN0cmluZyhmcm9tKSksXG4gICAgICB0b0Jsb2NrOiBuZXcgRXRoLkJOKFN0cmluZyh0bykpLFxuICAgICAgYWRkcmVzczogdG9rZW4uY29udHJhY3QsXG4gICAgICB0b3BpY3M6IFt0cmFuc2ZlclRvcGljXSxcbiAgICB9KTtcbiAgICByZXR1cm4gdHhzLm1hcCgodHg6IGFueSkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaGFzaDogdHgudHJhbnNhY3Rpb25IYXNoLFxuICAgICAgICBhbW91bnQ6IGhleFRvRGVjKHR4LmRhdGEpLFxuICAgICAgICBzZW5kZXI6IGFkZHJlc3NUb0xvd2VyKGhleFRvQWRkcmVzcyh0eC50b3BpY3NbMV0pKSxcbiAgICAgICAgcmVjZWl2ZXI6IGFkZHJlc3NUb0xvd2VyKGhleFRvQWRkcmVzcyh0eC50b3BpY3NbMl0pKSxcbiAgICAgICAgYmxvY2s6IE51bWJlcih0eC5ibG9ja051bWJlci50b1N0cmluZygpKSxcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzeW1ib2w6IHRva2VuLnN5bWJvbCxcbiAgICBkZWNpbWFsczogTnVtYmVyKGRlY2ltYWxzWzBdLnRvU3RyaW5nKCkpLFxuICAgIGFkZHJlc3M6IHRva2VuLmNvbnRyYWN0LFxuICAgIGdldFRyYW5zYWN0aW9uc0Zyb21CbG9jayxcbiAgfTtcbn1cbiJdfQ==