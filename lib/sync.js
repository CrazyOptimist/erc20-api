"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startIntervalSync = exports.initialSync = void 0;
const eth_1 = require("./eth");
const database_1 = require("./database");
const log_1 = require("./log");
const BLOCKS_BEHIND = process.env.BLOCKS_BEHIND ? Number(process.env.BLOCKS_BEHIND) : 6;
const REFRESH_TICK = process.env.REFRESH_TICK ? Number(process.env.REFRESH_TICK) : 20;
async function initialSync(token, api) {
    const currentBlock = await eth_1.getCurrentBlockNumber();
    const maxKnown = await database_1.getLatestBlockNumberForSymbol(token.symbol);
    log_1.logger.info("Inital Sync", { currentBlock, maxKnown });
    let i;
    if (maxKnown) {
        i = Math.max(token.scanFrom, maxKnown + 1);
    }
    else {
        i = token.scanFrom;
    }
    const chunks = Math.ceil((currentBlock - token.scanFrom) / token.interval);
    log_1.logger.info(`Start syncing token,`, { symbol: token.symbol, chunks });
    for (; i <= currentBlock; i += token.interval) {
        log_1.logger.info(`Loading txs at heights`, { from: i, to: i + token.interval });
        await getAndSaveBlocks(api, i, i + token.interval);
    }
    log_1.logger.info(`Finished syncing token`, { symbol: token.symbol });
}
exports.initialSync = initialSync;
async function startIntervalSync(token, api) {
    log_1.logger.info(`Starting interval sync for token`, { symbol: token.symbol });
    const maxKnown = await database_1.getLatestBlockNumberForSymbol(token.symbol);
    const currentBlock = await eth_1.getCurrentBlockNumber();
    if (maxKnown) {
        await getAndSaveBlocks(api, maxKnown + 1, currentBlock);
    }
    let currentHeight = currentBlock;
    setInterval(async () => {
        log_1.logger.info(`New tick refreshing`, { symbol: token.symbol });
        const newHeight = await eth_1.getCurrentBlockNumber();
        await getAndSaveBlocks(api, currentHeight - BLOCKS_BEHIND, newHeight - BLOCKS_BEHIND);
        currentHeight = newHeight;
    }, REFRESH_TICK * 1000);
}
exports.startIntervalSync = startIntervalSync;
async function getAndSaveBlocks(api, from, to) {
    const txs = await api.getTransactionsFromBlock(from, to);
    log_1.logger.info("Found transactions for blocks", { from, to, count: txs.length, symbol: api.symbol });
    txs.forEach((tx) => {
        database_1.Transaction.create({
            ...tx,
            contract: api.address,
            symbol: api.symbol,
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3luYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zeW5jLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLCtCQUF3RDtBQUV4RCx5Q0FBd0U7QUFDeEUsK0JBQStCO0FBRS9CLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLE1BQU0sWUFBWSxHQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBRWhGLEtBQUssVUFBVSxXQUFXLENBQUMsS0FBa0IsRUFBRSxHQUFhO0lBQ2pFLE1BQU0sWUFBWSxHQUFHLE1BQU0sMkJBQXFCLEVBQUUsQ0FBQztJQUNuRCxNQUFNLFFBQVEsR0FBRyxNQUFNLHdDQUE2QixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuRSxZQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELElBQUksQ0FBQyxDQUFDO0lBQ04sSUFBSSxRQUFRLEVBQUU7UUFDWixDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFHLFFBQW1CLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDeEQ7U0FBTTtRQUNMLENBQUMsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0tBQ3BCO0lBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNFLFlBQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3RFLE9BQU8sQ0FBQyxJQUFJLFlBQVksRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtRQUM3QyxZQUFNLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLE1BQU0sZ0JBQWdCLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3BEO0lBQ0QsWUFBTSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUNsRSxDQUFDO0FBakJELGtDQWlCQztBQUVNLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxLQUFrQixFQUFFLEdBQWE7SUFDdkUsWUFBTSxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUMxRSxNQUFNLFFBQVEsR0FBRyxNQUFNLHdDQUE2QixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuRSxNQUFNLFlBQVksR0FBRyxNQUFNLDJCQUFxQixFQUFFLENBQUM7SUFDbkQsSUFBSSxRQUFRLEVBQUU7UUFDWixNQUFNLGdCQUFnQixDQUFDLEdBQUcsRUFBRyxRQUFtQixHQUFHLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztLQUNyRTtJQUNELElBQUksYUFBYSxHQUFHLFlBQVksQ0FBQztJQUNqQyxXQUFXLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDckIsWUFBTSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUM3RCxNQUFNLFNBQVMsR0FBRyxNQUFNLDJCQUFxQixFQUFFLENBQUM7UUFDaEQsTUFBTSxnQkFBZ0IsQ0FDcEIsR0FBRyxFQUNILGFBQWEsR0FBRyxhQUFhLEVBQzdCLFNBQVMsR0FBRyxhQUFhLENBQzFCLENBQUM7UUFDRixhQUFhLEdBQUcsU0FBUyxDQUFDO0lBQzVCLENBQUMsRUFBRSxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQWxCRCw4Q0FrQkM7QUFFRCxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsR0FBYSxFQUFFLElBQVksRUFBRSxFQUFVO0lBQ3JFLE1BQU0sR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDLHdCQUF3QixDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RCxZQUFNLENBQUMsSUFBSSxDQUFDLCtCQUErQixFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDbEcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO1FBQ2pCLHNCQUFXLENBQUMsTUFBTSxDQUFDO1lBQ2pCLEdBQUcsRUFBRTtZQUNMLFFBQVEsRUFBRSxHQUFHLENBQUMsT0FBTztZQUNyQixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU07U0FDbkIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q3VycmVudEJsb2NrTnVtYmVyLCBUb2tlbkFwaSB9IGZyb20gXCIuL2V0aFwiO1xuaW1wb3J0IHsgVG9rZW5Db25maWcgfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHsgZ2V0TGF0ZXN0QmxvY2tOdW1iZXJGb3JTeW1ib2wsIFRyYW5zYWN0aW9uIH0gZnJvbSBcIi4vZGF0YWJhc2VcIjtcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCIuL2xvZ1wiO1xuXG5jb25zdCBCTE9DS1NfQkVISU5EID0gcHJvY2Vzcy5lbnYuQkxPQ0tTX0JFSElORCA/IE51bWJlcihwcm9jZXNzLmVudi5CTE9DS1NfQkVISU5EKSA6IDY7XG5jb25zdCBSRUZSRVNIX1RJQ0sgPSAgcHJvY2Vzcy5lbnYuUkVGUkVTSF9USUNLID8gTnVtYmVyKHByb2Nlc3MuZW52LlJFRlJFU0hfVElDSykgOiAyMDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxTeW5jKHRva2VuOiBUb2tlbkNvbmZpZywgYXBpOiBUb2tlbkFwaSkge1xuICBjb25zdCBjdXJyZW50QmxvY2sgPSBhd2FpdCBnZXRDdXJyZW50QmxvY2tOdW1iZXIoKTtcbiAgY29uc3QgbWF4S25vd24gPSBhd2FpdCBnZXRMYXRlc3RCbG9ja051bWJlckZvclN5bWJvbCh0b2tlbi5zeW1ib2wpO1xuICBsb2dnZXIuaW5mbyhcIkluaXRhbCBTeW5jXCIsIHsgY3VycmVudEJsb2NrLCBtYXhLbm93biB9KTtcbiAgbGV0IGk7XG4gIGlmIChtYXhLbm93bikge1xuICAgIGkgPSBNYXRoLm1heCh0b2tlbi5zY2FuRnJvbSwgKG1heEtub3duIGFzIG51bWJlcikgKyAxKTtcbiAgfSBlbHNlIHtcbiAgICBpID0gdG9rZW4uc2NhbkZyb207XG4gIH1cbiAgY29uc3QgY2h1bmtzID0gTWF0aC5jZWlsKChjdXJyZW50QmxvY2sgLSB0b2tlbi5zY2FuRnJvbSkgLyB0b2tlbi5pbnRlcnZhbCk7XG4gIGxvZ2dlci5pbmZvKGBTdGFydCBzeW5jaW5nIHRva2VuLGAsIHsgc3ltYm9sOiB0b2tlbi5zeW1ib2wsIGNodW5rcyB9KTtcbiAgZm9yICg7IGkgPD0gY3VycmVudEJsb2NrOyBpICs9IHRva2VuLmludGVydmFsKSB7XG4gICAgbG9nZ2VyLmluZm8oYExvYWRpbmcgdHhzIGF0IGhlaWdodHNgLCB7IGZyb206IGksIHRvOiBpICsgdG9rZW4uaW50ZXJ2YWwgfSk7XG4gICAgYXdhaXQgZ2V0QW5kU2F2ZUJsb2NrcyhhcGksIGksIGkgKyB0b2tlbi5pbnRlcnZhbCk7XG4gIH1cbiAgbG9nZ2VyLmluZm8oYEZpbmlzaGVkIHN5bmNpbmcgdG9rZW5gLCB7IHN5bWJvbDogdG9rZW4uc3ltYm9sIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRJbnRlcnZhbFN5bmModG9rZW46IFRva2VuQ29uZmlnLCBhcGk6IFRva2VuQXBpKSB7XG4gIGxvZ2dlci5pbmZvKGBTdGFydGluZyBpbnRlcnZhbCBzeW5jIGZvciB0b2tlbmAsIHsgc3ltYm9sOiB0b2tlbi5zeW1ib2wgfSk7XG4gIGNvbnN0IG1heEtub3duID0gYXdhaXQgZ2V0TGF0ZXN0QmxvY2tOdW1iZXJGb3JTeW1ib2wodG9rZW4uc3ltYm9sKTtcbiAgY29uc3QgY3VycmVudEJsb2NrID0gYXdhaXQgZ2V0Q3VycmVudEJsb2NrTnVtYmVyKCk7XG4gIGlmIChtYXhLbm93bikge1xuICAgIGF3YWl0IGdldEFuZFNhdmVCbG9ja3MoYXBpLCAobWF4S25vd24gYXMgbnVtYmVyKSArIDEsIGN1cnJlbnRCbG9jayk7XG4gIH1cbiAgbGV0IGN1cnJlbnRIZWlnaHQgPSBjdXJyZW50QmxvY2s7XG4gIHNldEludGVydmFsKGFzeW5jICgpID0+IHtcbiAgICBsb2dnZXIuaW5mbyhgTmV3IHRpY2sgcmVmcmVzaGluZ2AsIHsgc3ltYm9sOiB0b2tlbi5zeW1ib2wgfSk7XG4gICAgY29uc3QgbmV3SGVpZ2h0ID0gYXdhaXQgZ2V0Q3VycmVudEJsb2NrTnVtYmVyKCk7XG4gICAgYXdhaXQgZ2V0QW5kU2F2ZUJsb2NrcyhcbiAgICAgIGFwaSxcbiAgICAgIGN1cnJlbnRIZWlnaHQgLSBCTE9DS1NfQkVISU5ELFxuICAgICAgbmV3SGVpZ2h0IC0gQkxPQ0tTX0JFSElORFxuICAgICk7XG4gICAgY3VycmVudEhlaWdodCA9IG5ld0hlaWdodDtcbiAgfSwgUkVGUkVTSF9USUNLICogMTAwMCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFuZFNhdmVCbG9ja3MoYXBpOiBUb2tlbkFwaSwgZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSB7XG4gIGNvbnN0IHR4cyA9IGF3YWl0IGFwaS5nZXRUcmFuc2FjdGlvbnNGcm9tQmxvY2soZnJvbSwgdG8pO1xuICBsb2dnZXIuaW5mbyhcIkZvdW5kIHRyYW5zYWN0aW9ucyBmb3IgYmxvY2tzXCIsIHsgZnJvbSwgdG8sIGNvdW50OiB0eHMubGVuZ3RoLCBzeW1ib2w6IGFwaS5zeW1ib2wgfSk7XG4gIHR4cy5mb3JFYWNoKCh0eCkgPT4ge1xuICAgIFRyYW5zYWN0aW9uLmNyZWF0ZSh7XG4gICAgICAuLi50eCxcbiAgICAgIGNvbnRyYWN0OiBhcGkuYWRkcmVzcyxcbiAgICAgIHN5bWJvbDogYXBpLnN5bWJvbCxcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=