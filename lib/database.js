"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactionByHashForSymbol = exports.getTransactionsFromForSymbol = exports.getTransactionsToForSymbol = exports.getLatestBlockNumberForSymbol = exports.init = exports.Transaction = void 0;
const sequelize_1 = require("sequelize");
const sqlite = require("sqlite3");
const config = require("../config.json");
const fs_1 = __importDefault(require("fs"));
const sequelize = new sequelize_1.Sequelize({ dialect: "sqlite", storage: config.dbpath });
exports.Transaction = sequelize.define("Transaction", {
    symbol: { type: sequelize_1.DataTypes.STRING, allowNull: false },
    hash: { type: sequelize_1.DataTypes.STRING, allowNull: false },
    sender: { type: sequelize_1.DataTypes.STRING, allowNull: false },
    receiver: { type: sequelize_1.DataTypes.STRING, allowNull: false },
    amount: { type: sequelize_1.DataTypes.INTEGER, allowNull: false },
    block: { type: sequelize_1.DataTypes.INTEGER, allowNull: false },
    contract: { type: sequelize_1.DataTypes.STRING, allowNull: false },
});
async function init() {
    if (!fs_1.default.existsSync(config.dbpath)) {
        new sqlite.Database(config.dbpath);
    }
    await exports.Transaction.sync();
}
exports.init = init;
async function getLatestBlockNumberForSymbol(symbol) {
    const max = await exports.Transaction.max("block", {
        where: {
            symbol,
        },
    });
    return max;
}
exports.getLatestBlockNumberForSymbol = getLatestBlockNumberForSymbol;
async function getTransactionsToForSymbol(symbol, receiver) {
    return exports.Transaction.findAll({
        where: { symbol, receiver },
        order: [["block", "DESC"]],
    });
}
exports.getTransactionsToForSymbol = getTransactionsToForSymbol;
async function getTransactionsFromForSymbol(symbol, sender) {
    return exports.Transaction.findAll({
        where: { symbol, sender },
        order: [["block", "DESC"]],
    });
}
exports.getTransactionsFromForSymbol = getTransactionsFromForSymbol;
async function getTransactionByHashForSymbol(symbol, hash) {
    return exports.Transaction.findOne({
        where: { symbol, hash },
    });
}
exports.getTransactionByHashForSymbol = getTransactionByHashForSymbol;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZGF0YWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEseUNBQXdEO0FBQ3hELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNsQyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUN6Qyw0Q0FBb0I7QUFFcEIsTUFBTSxTQUFTLEdBQUcsSUFBSSxxQkFBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFZbEUsUUFBQSxXQUFXLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FDekMsYUFBYSxFQUNiO0lBQ0UsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLHFCQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7SUFDcEQsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLHFCQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7SUFDbEQsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLHFCQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7SUFDcEQsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLHFCQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7SUFDdEQsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLHFCQUFTLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7SUFDckQsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLHFCQUFTLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7SUFDcEQsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLHFCQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7Q0FDdkQsQ0FDRixDQUFDO0FBRUssS0FBSyxVQUFVLElBQUk7SUFDeEIsSUFBSSxDQUFDLFlBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ2pDLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDcEM7SUFDRCxNQUFNLG1CQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDM0IsQ0FBQztBQUxELG9CQUtDO0FBRU0sS0FBSyxVQUFVLDZCQUE2QixDQUFDLE1BQWM7SUFDaEUsTUFBTSxHQUFHLEdBQUcsTUFBTSxtQkFBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUU7UUFDekMsS0FBSyxFQUFFO1lBQ0wsTUFBTTtTQUNQO0tBQ0YsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBUEQsc0VBT0M7QUFFTSxLQUFLLFVBQVUsMEJBQTBCLENBQzlDLE1BQWMsRUFDZCxRQUFnQjtJQUVoQixPQUFPLG1CQUFXLENBQUMsT0FBTyxDQUFDO1FBQ3pCLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUU7UUFDM0IsS0FBSyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDM0IsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQVJELGdFQVFDO0FBQ00sS0FBSyxVQUFVLDRCQUE0QixDQUNoRCxNQUFjLEVBQ2QsTUFBYztJQUVkLE9BQU8sbUJBQVcsQ0FBQyxPQUFPLENBQUM7UUFDekIsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtRQUN6QixLQUFLLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztLQUMzQixDQUFDLENBQUM7QUFDTCxDQUFDO0FBUkQsb0VBUUM7QUFFTSxLQUFLLFVBQVUsNkJBQTZCLENBQ2pELE1BQWMsRUFDZCxJQUFZO0lBRVosT0FBTyxtQkFBVyxDQUFDLE9BQU8sQ0FBQztRQUN6QixLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO0tBQ3hCLENBQUMsQ0FBQztBQUNMLENBQUM7QUFQRCxzRUFPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlcXVlbGl6ZSwgRGF0YVR5cGVzLCBNb2RlbCB9IGZyb20gXCJzZXF1ZWxpemVcIjtcbmNvbnN0IHNxbGl0ZSA9IHJlcXVpcmUoXCJzcWxpdGUzXCIpO1xuY29uc3QgY29uZmlnID0gcmVxdWlyZShcIi4uL2NvbmZpZy5qc29uXCIpO1xuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuXG5jb25zdCBzZXF1ZWxpemUgPSBuZXcgU2VxdWVsaXplKHsgZGlhbGVjdDogXCJzcWxpdGVcIiwgc3RvcmFnZTogY29uZmlnLmRicGF0aCB9KTtcblxuZXhwb3J0IGludGVyZmFjZSBEQlRyYW5zYWN0aW9uIHtcbiAgc3ltYm9sOiBzdHJpbmc7XG4gIGhhc2g6IHN0cmluZztcbiAgc2VuZGVyOiBzdHJpbmc7XG4gIHJlY2VpdmVyOiBzdHJpbmc7XG4gIGFtb3VudDogbnVtYmVyO1xuICBibG9jazogbnVtYmVyO1xuICBjb250cmFjdDogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgVHJhbnNhY3Rpb24gPSBzZXF1ZWxpemUuZGVmaW5lPE1vZGVsPERCVHJhbnNhY3Rpb24+PihcbiAgXCJUcmFuc2FjdGlvblwiLFxuICB7XG4gICAgc3ltYm9sOiB7IHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsIGFsbG93TnVsbDogZmFsc2UgfSxcbiAgICBoYXNoOiB7IHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsIGFsbG93TnVsbDogZmFsc2UgfSxcbiAgICBzZW5kZXI6IHsgdHlwZTogRGF0YVR5cGVzLlNUUklORywgYWxsb3dOdWxsOiBmYWxzZSB9LFxuICAgIHJlY2VpdmVyOiB7IHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsIGFsbG93TnVsbDogZmFsc2UgfSxcbiAgICBhbW91bnQ6IHsgdHlwZTogRGF0YVR5cGVzLklOVEVHRVIsIGFsbG93TnVsbDogZmFsc2UgfSxcbiAgICBibG9jazogeyB0eXBlOiBEYXRhVHlwZXMuSU5URUdFUiwgYWxsb3dOdWxsOiBmYWxzZSB9LFxuICAgIGNvbnRyYWN0OiB7IHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsIGFsbG93TnVsbDogZmFsc2UgfSxcbiAgfVxuKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XG4gIGlmICghZnMuZXhpc3RzU3luYyhjb25maWcuZGJwYXRoKSkge1xuICAgIG5ldyBzcWxpdGUuRGF0YWJhc2UoY29uZmlnLmRicGF0aCk7XG4gIH1cbiAgYXdhaXQgVHJhbnNhY3Rpb24uc3luYygpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TGF0ZXN0QmxvY2tOdW1iZXJGb3JTeW1ib2woc3ltYm9sOiBzdHJpbmcpIHtcbiAgY29uc3QgbWF4ID0gYXdhaXQgVHJhbnNhY3Rpb24ubWF4KFwiYmxvY2tcIiwge1xuICAgIHdoZXJlOiB7XG4gICAgICBzeW1ib2wsXG4gICAgfSxcbiAgfSk7XG4gIHJldHVybiBtYXg7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUcmFuc2FjdGlvbnNUb0ZvclN5bWJvbChcbiAgc3ltYm9sOiBzdHJpbmcsXG4gIHJlY2VpdmVyOiBzdHJpbmdcbikge1xuICByZXR1cm4gVHJhbnNhY3Rpb24uZmluZEFsbCh7XG4gICAgd2hlcmU6IHsgc3ltYm9sLCByZWNlaXZlciB9LFxuICAgIG9yZGVyOiBbW1wiYmxvY2tcIiwgXCJERVNDXCJdXSxcbiAgfSk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25zRnJvbUZvclN5bWJvbChcbiAgc3ltYm9sOiBzdHJpbmcsXG4gIHNlbmRlcjogc3RyaW5nXG4pIHtcbiAgcmV0dXJuIFRyYW5zYWN0aW9uLmZpbmRBbGwoe1xuICAgIHdoZXJlOiB7IHN5bWJvbCwgc2VuZGVyIH0sXG4gICAgb3JkZXI6IFtbXCJibG9ja1wiLCBcIkRFU0NcIl1dLFxuICB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uQnlIYXNoRm9yU3ltYm9sKFxuICBzeW1ib2w6IHN0cmluZyxcbiAgaGFzaDogc3RyaW5nXG4pIHtcbiAgcmV0dXJuIFRyYW5zYWN0aW9uLmZpbmRPbmUoe1xuICAgIHdoZXJlOiB7IHN5bWJvbCwgaGFzaCB9LFxuICB9KTtcbn1cbiJdfQ==