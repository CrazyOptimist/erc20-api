"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const database_1 = require("./database");
const helper_1 = require("./helper");
const log_1 = require("./log");
const app = express_1.default();
app.use(express_1.default.json());
app.use(cors_1.default({
    origin: true,
    maxAge: 7200,
}));
app.get("/:symbol/to/:address", async (req, res) => {
    const symbol = req.params.symbol;
    const address = req.params.address;
    if (!address || !symbol)
        return res.status(400).send("Missing params");
    try {
        const transactions = await database_1.getTransactionsToForSymbol(symbol, helper_1.addressToLower(address));
        return res.json({ transactions });
    }
    catch (error) {
        console.error("/:symbol/to/:address", { error });
        return res.status(500).send(error);
    }
});
app.get("/:symbol/from/:address", async (req, res) => {
    const symbol = req.params.symbol;
    const address = req.params.address;
    if (!address || !symbol)
        return res.status(400).send("Missing params");
    try {
        const transactions = await database_1.getTransactionsFromForSymbol(symbol, helper_1.addressToLower(address));
        return res.json({ transactions });
    }
    catch (error) {
        console.error("/:symbol/to/:address", { error });
        return res.status(500).send(error);
    }
});
app.get("/:symbol/hash/:hash", async (req, res) => {
    const symbol = req.params.symbol;
    const hash = req.params.hash;
    if (!hash || !symbol)
        return res.status(400).send("Missing params");
    try {
        const transaction = await database_1.getTransactionByHashForSymbol(symbol, helper_1.addressToLower(hash));
        return res.json({ transaction });
    }
    catch (error) {
        console.error("/:symbol/hash/:hash", { error });
        return res.status(500).send(error);
    }
});
const port = process.env.PORT || 3000;
app.listen(port, () => {
    log_1.logger.info(`Service is listening on port ${port}`);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNEQUE4QjtBQUM5QixnREFBd0I7QUFDeEIseUNBSW9CO0FBQ3BCLHFDQUEwQztBQUMxQywrQkFBK0I7QUFFL0IsTUFBTSxHQUFHLEdBQUcsaUJBQU8sRUFBRSxDQUFDO0FBQ3RCLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLEdBQUcsQ0FBQyxHQUFHLENBQ0wsY0FBSSxDQUFDO0lBQ0gsTUFBTSxFQUFFLElBQUk7SUFDWixNQUFNLEVBQUUsSUFBSTtDQUNiLENBQUMsQ0FDSCxDQUFDO0FBR0YsR0FBRyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQ2pELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2pDLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ25DLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxNQUFNO1FBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3ZFLElBQUk7UUFDRixNQUFNLFlBQVksR0FBRyxNQUFNLHFDQUEwQixDQUNuRCxNQUFNLEVBQ04sdUJBQWMsQ0FBQyxPQUFPLENBQUMsQ0FDeEIsQ0FBQztRQUNGLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUM7S0FDbkM7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDcEM7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUdILEdBQUcsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUNuRCxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNqQyxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNuQyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsTUFBTTtRQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN2RSxJQUFJO1FBQ0YsTUFBTSxZQUFZLEdBQUcsTUFBTSx1Q0FBNEIsQ0FDckQsTUFBTSxFQUNOLHVCQUFjLENBQUMsT0FBTyxDQUFDLENBQ3hCLENBQUM7UUFDRixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO0tBQ25DO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLHNCQUFzQixFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNqRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3BDO0FBQ0gsQ0FBQyxDQUFDLENBQUM7QUFHSCxHQUFHLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDaEQsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDakMsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDN0IsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU07UUFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDcEUsSUFBSTtRQUNGLE1BQU0sV0FBVyxHQUFHLE1BQU0sd0NBQTZCLENBQ3JELE1BQU0sRUFDTix1QkFBYyxDQUFDLElBQUksQ0FBQyxDQUNyQixDQUFDO1FBQ0YsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztLQUNsQztJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDaEQsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNwQztBQUNILENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO0FBQ3RDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRTtJQUNwQixZQUFNLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3RELENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBjb3JzIGZyb20gXCJjb3JzXCI7XG5pbXBvcnQge1xuICBnZXRUcmFuc2FjdGlvbnNUb0ZvclN5bWJvbCxcbiAgZ2V0VHJhbnNhY3Rpb25zRnJvbUZvclN5bWJvbCxcbiAgZ2V0VHJhbnNhY3Rpb25CeUhhc2hGb3JTeW1ib2wsXG59IGZyb20gXCIuL2RhdGFiYXNlXCI7XG5pbXBvcnQgeyBhZGRyZXNzVG9Mb3dlciB9IGZyb20gXCIuL2hlbHBlclwiO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi9sb2cnO1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5hcHAudXNlKGV4cHJlc3MuanNvbigpKTtcbmFwcC51c2UoXG4gIGNvcnMoe1xuICAgIG9yaWdpbjogdHJ1ZSxcbiAgICBtYXhBZ2U6IDcyMDAsXG4gIH0pXG4pO1xuXG4vLyBHZXQgdHJhbnNhY3Rpb25zIHRvXG5hcHAuZ2V0KFwiLzpzeW1ib2wvdG8vOmFkZHJlc3NcIiwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIGNvbnN0IHN5bWJvbCA9IHJlcS5wYXJhbXMuc3ltYm9sO1xuICBjb25zdCBhZGRyZXNzID0gcmVxLnBhcmFtcy5hZGRyZXNzO1xuICBpZiAoIWFkZHJlc3MgfHwgIXN5bWJvbCkgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5zZW5kKFwiTWlzc2luZyBwYXJhbXNcIik7XG4gIHRyeSB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb25zID0gYXdhaXQgZ2V0VHJhbnNhY3Rpb25zVG9Gb3JTeW1ib2woXG4gICAgICBzeW1ib2wsXG4gICAgICBhZGRyZXNzVG9Mb3dlcihhZGRyZXNzKVxuICAgICk7XG4gICAgcmV0dXJuIHJlcy5qc29uKHsgdHJhbnNhY3Rpb25zIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCIvOnN5bWJvbC90by86YWRkcmVzc1wiLCB7IGVycm9yIH0pO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuc2VuZChlcnJvcik7XG4gIH1cbn0pO1xuXG4vLyBHZXQgdHJhbnNhY3Rpb25zIGZyb21cbmFwcC5nZXQoXCIvOnN5bWJvbC9mcm9tLzphZGRyZXNzXCIsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBzeW1ib2wgPSByZXEucGFyYW1zLnN5bWJvbDtcbiAgY29uc3QgYWRkcmVzcyA9IHJlcS5wYXJhbXMuYWRkcmVzcztcbiAgaWYgKCFhZGRyZXNzIHx8ICFzeW1ib2wpIHJldHVybiByZXMuc3RhdHVzKDQwMCkuc2VuZChcIk1pc3NpbmcgcGFyYW1zXCIpO1xuICB0cnkge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9ucyA9IGF3YWl0IGdldFRyYW5zYWN0aW9uc0Zyb21Gb3JTeW1ib2woXG4gICAgICBzeW1ib2wsXG4gICAgICBhZGRyZXNzVG9Mb3dlcihhZGRyZXNzKVxuICAgICk7XG4gICAgcmV0dXJuIHJlcy5qc29uKHsgdHJhbnNhY3Rpb25zIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCIvOnN5bWJvbC90by86YWRkcmVzc1wiLCB7IGVycm9yIH0pO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuc2VuZChlcnJvcik7XG4gIH1cbn0pO1xuXG4vLyBHZXQgdHJhbnNhY3Rpb25zIGJ5IGhhc2hcbmFwcC5nZXQoXCIvOnN5bWJvbC9oYXNoLzpoYXNoXCIsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBzeW1ib2wgPSByZXEucGFyYW1zLnN5bWJvbDtcbiAgY29uc3QgaGFzaCA9IHJlcS5wYXJhbXMuaGFzaDtcbiAgaWYgKCFoYXNoIHx8ICFzeW1ib2wpIHJldHVybiByZXMuc3RhdHVzKDQwMCkuc2VuZChcIk1pc3NpbmcgcGFyYW1zXCIpO1xuICB0cnkge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gYXdhaXQgZ2V0VHJhbnNhY3Rpb25CeUhhc2hGb3JTeW1ib2woXG4gICAgICBzeW1ib2wsXG4gICAgICBhZGRyZXNzVG9Mb3dlcihoYXNoKVxuICAgICk7XG4gICAgcmV0dXJuIHJlcy5qc29uKHsgdHJhbnNhY3Rpb24gfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIi86c3ltYm9sL2hhc2gvOmhhc2hcIiwgeyBlcnJvciB9KTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLnNlbmQoZXJyb3IpO1xuICB9XG59KTtcblxuY29uc3QgcG9ydCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMDtcbmFwcC5saXN0ZW4ocG9ydCwgKCkgPT4ge1xuICBsb2dnZXIuaW5mbyhgU2VydmljZSBpcyBsaXN0ZW5pbmcgb24gcG9ydCAke3BvcnR9YCk7XG59KTtcbiJdfQ==